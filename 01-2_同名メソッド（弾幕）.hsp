// 実際には、モジュールごとにファイルを分けるべきです。
// 標準の描画は重いので、同時に800個程度処理するとFPSが下がります（PCのスペックにもよる）。
// 当たり判定とかをつけるとさらに遅くなります。

#include "d3m.hsp" // FPS表示用

// ラベル管理定数
#enum global LABEL_DISPLAY 0
#enum global LABEL_UPDATE
#enum global LABEL_NUM

// データ管理定数
#enum global DATA_X = 0
#enum global DATA_Y
#enum global DATA_ANGLE
#enum global DATA_SPEED
#enum global DATA_NUM

// --------------------------------------------------------------------------------------------- //

// 弾のインタフェース？親クラス？的なもの
#module BulletInterface labels, data // フィールドは順番・変数名をそろえる

// 描画
#modfunc display

	// オーバーライド
	if(vartype(labels) == vartype("label")){
		if(varuse(labels.LABEL_DISPLAY)){
			gosub labels.LABEL_DISPLAY
			return
		}
	}

	// 親の処理を使う
	r = 7
	color 255, 255, 255
	circle data.DATA_X - r, data.DATA_Y - r, data.DATA_X + r, data.DATA_Y + r, 1

	r = 9
	color 255, 255, 255
	circle data.DATA_X - r, data.DATA_Y - r, data.DATA_X + r, data.DATA_Y + r, 0

	return

// 更新
#modfunc update

	// 画面外は強制削除
	margin = 64
	if(data.DATA_X != limitf(data.DATA_X, -margin, ginfo_winx + margin) || data.DATA_Y != limitf(data.DATA_Y, -margin, ginfo_winy + margin)){
		delmod thismod
		return
	}

	// オーバーライド
	if(vartype(labels) == vartype("label")){
		if(varuse(labels.LABEL_UPDATE)){
			gosub labels.LABEL_UPDATE
			return // すべて同じ処理をしたいなら return をつけなくてもいいかも
		}
	}

	// 親の処理を使う
	data.DATA_X += sin(deg2rad(data.DATA_ANGLE)) * data.DATA_SPEED
	data.DATA_Y += cos(deg2rad(data.DATA_ANGLE)) * data.DATA_SPEED

	return
#global

// --------------------------------------------------------------------------------------------- //

// 通常の弾
#module Bullet_TYPE1 labels, data
#modinit double _x, double _y, double _angle, double _speed

	// ラベルの設定
	ldim labels, LABEL_NUM
	;labels.LABEL_DISPLAY // オーバーライドしない
	;labels.LABEL_UPDATE // オーバーライドしない

	// データの設定
	ddim data, DATA_NUM
	data.DATA_X = _x
	data.DATA_Y = _y
	data.DATA_ANGLE = _angle
	data.DATA_SPEED = _speed
	
	return

#global

// --------------------------------------------------------------------------------------------- //

// 徐々に早くなる弾
#module Bullet_TYPE2 labels, data
#modinit double _x, double _y, double _angle, double _speed

	// ラベルの設定
	ldim labels, LABEL_NUM
	labels.LABEL_DISPLAY = *l_display // オーバーライドする
	labels.LABEL_UPDATE = *l_update // オーバーライドする

	// データの設定
	ddim data, DATA_NUM
	data.DATA_X = _x
	data.DATA_Y = _y
	data.DATA_ANGLE = _angle
	data.DATA_SPEED = _speed
	
	return

// 描画本体（ラベル側だとモジュール変数が使えない（なんで？））
#modfunc Bullet_TYPE2_display

	r = 4
	color 220, 180, 180
	circle data.DATA_X - r, data.DATA_Y - r, data.DATA_X + r, data.DATA_Y + r, 1

	r = 7
	color 255, 255, 80
	circle data.DATA_X - r, data.DATA_Y - r, data.DATA_X + r, data.DATA_Y + r, 0

	return

// 描画
*l_display
	Bullet_TYPE2_display thismod
	return

// 更新本体
#modfunc Bullet_TYPE2_update

	data.DATA_SPEED += 0.08
	data.DATA_X += sin(deg2rad(data.DATA_ANGLE)) * data.DATA_SPEED
	data.DATA_Y += cos(deg2rad(data.DATA_ANGLE)) * data.DATA_SPEED

	return


// 更新
*l_update
	Bullet_TYPE2_update thismod
	return

#global

// --------------------------------------------------------------------------------------------- //

// Uターンする弾
#module Bullet_TYPE3 labels, data
#modinit double _x, double _y, double _angle, double _speed

	// ラベルの設定
	ldim labels, LABEL_NUM
	labels.LABEL_DISPLAY = *l_display // オーバーライドする
	labels.LABEL_UPDATE = *l_update // オーバーライドする

	// データの設定
	ddim data, DATA_NUM
	data.DATA_X = _x
	data.DATA_Y = _y
	data.DATA_ANGLE = _angle
	data.DATA_SPEED = _speed
	
	return

// 描画本体
#modfunc Bullet_TYPE3_display

	r = 11
	color 80, 100, 160
	circle data.DATA_X - r, data.DATA_Y - r, data.DATA_X + r, data.DATA_Y + r, 1

	r = 6
	color 220, 220, 255
	circle data.DATA_X - r, data.DATA_Y - r, data.DATA_X + r, data.DATA_Y + r, 1

	return

// 描画
*l_display
	Bullet_TYPE3_display thismod
	return

// 更新本体
#modfunc Bullet_TYPE3_update

	data.DATA_SPEED += 0.12
	data.DATA_X += sin(deg2rad(data.DATA_ANGLE)) * data.DATA_SPEED
	data.DATA_Y += cos(deg2rad(data.DATA_ANGLE)) * data.DATA_SPEED

	return


// 更新
*l_update
	Bullet_TYPE3_update thismod
	return

#global

// --------------------------------------------------------------------------------------------- //

	// 弾の初期化
	dimtype bullet, vartype("struct")

	// 描画設定
	font msgothic, 12, 1

	// メイン
	repeat
		redraw 0

		// 出現座標
		setease -20, 20, ease_quad_inout + ease_loop
		x = 320 + getease(cnt, 90)
		y = 100

		// 生成
		if(cnt \ 22 == 0){
			
			// Bullet_TYPE1（本来は敵オブジェクトから生成する）
			d = cnt \ 360
			repeat 36
				ang = cnt * 360 / 36 + d
				newmod bullet, Bullet_TYPE1, x, y, ang, 0.99
			loop

			// Bullet_TYPE2（本来は敵オブジェクトから生成する）
			d = cnt \ 360
			repeat 12
				ang = cnt * 360 / 12 - d
				newmod bullet, Bullet_TYPE2, x, y, ang, 0
			loop

			// Bullet_TYPE3（本来は敵オブジェクトから生成する）
			d = cnt \ 360
			repeat 8
				ang = cnt * 360 / 8 - d
				newmod bullet, Bullet_TYPE3, x, y, ang, -5
			loop
		}

		// 更新
		foreach bullet
			update bullet.cnt
		loop

		// 描画
		color 0:boxf
		foreach bullet
			display bullet.cnt
		loop

		// 敵のダミー
		r = 40
		color 20, 180, 255
		argx = x-sin(deg2rad(-cnt))*r, x-sin(deg2rad(-cnt+90))*r, x-sin(deg2rad(-cnt+180))*r, x-sin(deg2rad(-cnt+270))*r
		argy = y-cos(deg2rad(-cnt))*r, y-cos(deg2rad(-cnt+90))*r, y-cos(deg2rad(-cnt+180))*r, y-cos(deg2rad(-cnt+270))*r
		gsquare -1, argx, argy
		r = 25
		color 220, 220, 255
		argx = x-sin(deg2rad(cnt))*r, x-sin(deg2rad(cnt+90))*r, x-sin(deg2rad(cnt+180))*r, x-sin(deg2rad(cnt+270))*r
		argy = y-cos(deg2rad(cnt))*r, y-cos(deg2rad(cnt+90))*r, y-cos(deg2rad(cnt+180))*r, y-cos(deg2rad(cnt+270))*r
		gsquare -1, argx, argy

		// デバッグ表示
		color 20, 20, 20
		boxf 0, 0, 120, 60
		color 255, 255, 255
		pos 5,5
		mes strf("FPS: %2.3f", d3getfps())
		mes strf("TIME: %d", cnt)
		mes strf("BULLET_CNT: %d", length(bullet) - 1)

		redraw 1
		await 1000/60
	loop